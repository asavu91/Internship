#include <iostream>
#include <fstream>
#include <vector>
#include <boost/asio.hpp>

void async_copy_file(const std::string& source, const std::string& destination) {
    try {
        boost::asio::io_context ioContext;
        boost::asio::io_context::work work(ioContext);

        // Deschide fișierele sursă și destinație în mod asincron
        boost::asio::posix::stream_descriptor sourceFile(ioContext, ::open(source.c_str(), O_RDONLY));
        boost::asio::posix::stream_descriptor destFile(ioContext, ::open(destination.c_str(), O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH));

        // Buffer pentru citire și scriere
        std::vector<char> buffer(4096);

        // Funcția de citire și scriere asincronă
        auto readHandler = [&](const boost::system::error_code& error, std::size_t bytesRead) {
            if (!error) {
                if (bytesRead > 0) {
                    async_write(destFile, boost::asio::buffer(buffer.data(), bytesRead), [&](const boost::system::error_code& writeError, std::size_t /*bytesWritten*/) {
                        if (!writeError) {
                            async_read(sourceFile, boost::asio::buffer(buffer), readHandler);
                        } else {
                            std::cerr << "Eroare la scrierea în fișierul destinație: " << writeError.message() << std::endl;
                        }
                    });
                } else {
                    // Închide fișierele și oprește contextul asincron
                    sourceFile.close();
                    destFile.close();
                    ioContext.stop();
                }
            } else {
                std::cerr << "Eroare la citirea din fișierul sursă: " << error.message() << std::endl;
            }
        };

        // Începe citirea asincronă
        async_read(sourceFile, boost::asio::buffer(buffer), readHandler);

        // Rulează operațiile asincrone
        ioContext.run();
    } catch (const std::exception& e) {
        std::cerr << "Excepție: " << e.what() << std::endl;
    }
}

int main() {
    const std::string sourceFileName = "source.txt";
    const std::string destFileName = "destination.txt";

    async_copy_file(sourceFileName, destFileName);

    std::cout << "Copierea asincronă a fost finalizată cu succes.\n";

    return 0;
}
